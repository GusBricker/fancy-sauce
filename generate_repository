#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source ${DIR}/include/common.sh

ParseCommonArgs "${@}"

DoEcho "Installing dependancies"
InstallPackage dpkg-dev reprepro

DoEcho "Setting up things!"
conf_dir="${CONFIG_REPOSITORY_PATH}/conf"
mkdir -p "${conf_dir}"
echo "${CONFIG_DISTRIBUTIONS}" > "${conf_dir}/distributions"

DoEcho "Reading manifest from: ${CONFIG_MANIFEST_PATH}"
IFS=$'\n' read -d '' -r -a LINES < ${CONFIG_MANIFEST_PATH}

DoEcho "Making sure directories exist"
download_dir="${CONFIG_DOWNLOAD_PACKAGES_PATH}"
mkdir -p "${download_dir}"
errors=()

for line in "${LINES[@]}"; do
    FIELDS=( ${line} )
    pkg="${FIELDS[1]}"
    ver="${FIELDS[2]}"
    pretty_name="[DEB] ${pkg}=${ver}"

    DoEcho "${pretty_name}"
    package_name=$(PackageName "${pkg}" "${ver}")
    got_package_name=$?

    if [ ${got_package_name} -eq 0 ]
    then
        if [[ "x${package_name}" != "x" ]]
        then
            ContinueEcho "Filename: ${package_name}"

            if [ ! -f "${package_name}" ]
            then
                pushd "${download_dir}"
                ContinueEcho "Downloading..."
                if DownloadPackage "${pkg}" "${ver}" "$(pwd)"
                then
                    ContinueEcho "Adding..."
                    reprepro -b "${CONFIG_REPOSITORY_PATH}" includedeb "${CONFIG_DISTRIBUTION_NAME}" "${package_name}" || \
                    errors+=("${pretty_name}: Couldn't add to repo")
                else
                    errors+=("${pretty_name}: Download fail")
                fi
                popd
            else
                ContinueEcho "Have already, skipping..."
            fi
        else
            errors+=("${pretty_name}: Couldn't determine filename")
            ContinueEcho "Couldn't determine filename, skipping..."
        fi
    else
        ContinueEcho "Got error, skipping..."
    fi


    if [[ "x${CONFIG_DOWNLOAD_PACKAGE_SOURCE}" == "xyes" ]]
    then
        pretty_name="[DSC] ${pkg}=${ver}"

        DoEcho "${pretty_name}"
        package_name=$(PackageSourceName "${pkg}" "${ver}")
        got_package_name=$?

        if [ ${got_package_name} -eq 0 ]
        then
            if [[ "x${package_name}" != "x" ]]
            then
                ContinueEcho "Filename: ${package_name}"

                if [ ! -f "${package_name}" ]
                then
                    pushd "${download_dir}"
                    ContinueEcho "Downloading..."
                    if DownloadPackageSource "${pkg}" "${ver}" "$(pwd)"
                    then
                        ContinueEcho "Adding..."
                        reprepro -b "${CONFIG_REPOSITORY_PATH}" includedsc "${CONFIG_DISTRIBUTION_NAME}" "${package_name}" || \
                        errors+=("${pretty_name}: Couldn't add to repo")
                    else
                        errors+=("${pretty_name}: Download fail")
                    fi
                    popd
                else
                    ContinueEcho "Have already, skipping..."
                fi
            else
                errors+=("${pretty_name}: Couldn't determine filename")
                ContinueEcho "Couldn't determine filename, skipping..."
            fi
        else
            ContinueEcho "Got error, skipping..."
        fi
    fi
done

DoEcho "Finished, checking repository integrity"
generation_errors="good"
reprepro -b "${CONFIG_REPOSITORY_PATH}" checkpool || generation_errors="bad"

ContinueEcho "Repository Intregrity: ${generation_errors}"
num_errors="${#errors[@]}"
ContinueEcho "Generation Errors: ${num_errors}"

retcode=0
if [ ${num_errors} -gt 0 ]
then
    ContinueEcho "Packages with errors:"
    for error in "${errors[@]}"
    do
        ContinueEcho "${error}"
    done
    retcode=1
fi

ContinueEcho "Deleting any unreferenced files"
reprepro -b "${CONFIG_REPOSITORY_PATH}" deleteunreferenced

if [[ "${generation_errors}" == "no" ]]
then
    retcode=1
fi

exit ${retcode}
